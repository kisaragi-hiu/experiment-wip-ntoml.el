#!/bin/sh
":"; exec emacs --quick --script "$0" "$@" # -*-mode: emacs-lisp; lexical-binding: t-*-

(setq debug-on-error nil
      load-prefer-newer t)

(dolist (version (directory-files (expand-file-name "../.cask/") t "^[^.]"))
  ;; This will include the "archives" folder. But there are no .el
  ;; files in there anyways.
  (dolist (pkg (directory-files (expand-file-name "elpa" version) t "^[^.]"))
    (add-to-list 'load-path pkg)))

(add-to-list 'load-path (expand-file-name "../"))
(require 'ntoml)
(require 'json)

;; Inlined from dash.el
(defun -cons-pair? (obj)
  "Return non-nil if OBJ is a true cons pair.
That is, a cons (A . B) where B is not a list.

Alias: `-cons-pair-p'."
  (declare (pure t) (side-effect-free t))
  (nlistp (cdr-safe obj)))
(defun -tree-map (fn tree)
  "Apply FN to each element of TREE while preserving the tree structure."
  (cond
   ((not tree) nil)
   ((-cons-pair? tree) (funcall fn tree))
   ((listp tree)
    (mapcar (lambda (x) (-tree-map fn x)) tree))
   (t (funcall fn tree))))

(defvar stdin)

(let ((ret "")
      (this nil))
  (while (setq this (ignore-errors (read-from-minibuffer "")))
    (setq ret (concat ret "\n" this)))
  (setq stdin ret))

(setq decoded (ntoml-decode stdin))

(defun t/transform-tree (tree)
  (-tree-map
   (lambda (it)
     (pcase it
       (`(,k . ,v)
        (cons k (t/transform-atom v)))
       (_ (t/transform-atom it))))
   tree))

(defun t/transform-atom (v)
  (cond ((stringp v)
         `((type . "string")
           (value . ,v)))
        ((integerp v)
         `((type . "integer")
           (value . ,(number-to-string v))))
        ((vectorp v)
         (vconcat
          (mapcar #'t/transform-tree v)))
        ((cl-typep v 'ntoml-date-time)
         `((type . "datetime")
           (value . ,(ntoml-date-time-timestamp v))))
        ((cl-typep v 'ntoml-date-time-local)
         `((type . "datetime-local")
           (value . ,(ntoml-date-time-local-timestamp v))))
        ((cl-typep v 'ntoml-date-local)
         `((type . "date-local")
           (value . ,(ntoml-date-local-timestamp v))))
        ((cl-typep v 'ntoml-time-local)
         `((type . "time-local")
           (value . ,(ntoml-time-local-timestamp v))))
        (t v)))

(princ
 (json-serialize
  (t/transform-tree decoded)))

(setq argv nil)
